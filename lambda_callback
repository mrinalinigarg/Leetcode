# Take x and return x squared if x > 0 and 0, otherwise
squared_no_negatives = lambda x: x**2 if x>0 else 0
print(squared_no_negatives(2.0))
print(squared_no_negatives(-1))

# Take a list of integers nums and leave only even numbers
get_even = lambda nums: [n for n in nums if n % 2 == 0]
print(get_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))

# Take strings s1, s2 and list their common characters
common_chars = lambda s1, s2: set(s1).intersection(set(s2))
print(common_chars('pasta', 'pizza'))

# Convert func1() to a lambda expression
lambda1 = lambda x,y: x if x>=y else y
print(str(func1(5, 4)) + ', ' + str(lambda1(5, 4)))
print(str(func1(4, 5)) + ', ' + str(lambda1(4, 5)))

# Convert func2() to a lambda expression
lambda2 = lambda s: dict([(c, s.count(c)) for c in set(s)])
print(func2('DataCamp'))
print(lambda2('DataCamp'))

# Convert func3() to a lambda expression
lambda3 = lambda *args: math.sqrt(sum(n**2 for n in args))
print(str(func3(3, 4)) + ', ' + str(lambda3(3, 4)))
print(str(func3(3, 4, 5)) + ', ' + str(lambda3(3, 4, 5)))

# Sort words by the string length
words.sort(key=lambda s: len(s))
print(words)

# Sort words by the last character in a string
words.sort(key= lambda s: s[-1])
print(words)

# Sort words by the total amount of certain characters
words.sort(key=lambda s: s.count('a') + s.count('b') + s.count('c'))
print(words)
